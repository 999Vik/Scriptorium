// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// Models

model User {
  id             Int             @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String          @unique
  password       String
  profilePicture String?
  phoneNumber    String?
  role           String          @default("USER") // Replaced enum with string
  templates      CodeTemplate[]  @relation("UserTemplates")
  blogPosts      BlogPost[]      @relation("UserBlogPosts")
  comments       Comment[]       @relation("UserComments")
  ratings        Rating[]        @relation("UserRatings")
  reports        Report[]        @relation("UserReports")
}

model Tag {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  codeTemplateTags  CodeTemplateTag[] @relation("CodeTemplateTags")
  blogPostTags      BlogPostTag[]     @relation("BlogPostTags")
}

model CodeTemplate {
  id               Int                    @id @default(autoincrement())
  title            String
  explanation      String?
  code             String
  language         String                 // Replaced enum with string
  isForked         Boolean                @default(false)
  author           User                   @relation("UserTemplates", fields: [authorId], references: [id])
  authorId         Int
  parentTemplate   CodeTemplate?          @relation("ForkRelation", fields: [parentTemplateId], references: [id])
  parentTemplateId Int?
  forkedTemplates  CodeTemplate[]         @relation("ForkRelation")
  blogPosts        BlogPostCodeTemplate[] // Many-to-Many via join table
  codeTemplateTags CodeTemplateTag[]      @relation("CodeTemplateTags")
}

model BlogPost {
  id           Int               @id @default(autoincrement())
  title        String
  description  String?
  content      String
  author       User              @relation("UserBlogPosts", fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  comments     Comment[]         @relation("BlogPostComments")
  ratings      Rating[]          @relation("BlogPostRatings")
  reports      Report[]          @relation("BlogPostReports")
  templates    BlogPostCodeTemplate[] // Many-to-Many via join table
  blogPostTags BlogPostTag[]     @relation("BlogPostTags")
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  author          User      @relation("UserComments", fields: [authorId], references: [id])
  authorId        Int
  blogPost        BlogPost  @relation("BlogPostComments", fields: [blogPostId], references: [id])
  blogPostId      Int
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  replies         Comment[] @relation("CommentReplies")
  createdAt       DateTime  @default(now())
  ratings         Rating[]  @relation("CommentRatings")
  reports         Report[]  @relation("CommentReports")
}

model Rating {
  id         Int       @id @default(autoincrement())
  user       User      @relation("UserRatings", fields: [userId], references: [id])
  userId     Int
  blogPost   BlogPost? @relation("BlogPostRatings", fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation("CommentRatings", fields: [commentId], references: [id])
  commentId  Int?
  isUpvote   Boolean
}

model Report {
  id          Int         @id @default(autoincrement())
  reporter    User        @relation("UserReports", fields: [reporterId], references: [id])
  reporterId  Int
  contentType String      // Replaced enum with string ("BLOG_POST", "COMMENT")
  blogPost    BlogPost?   @relation("BlogPostReports", fields: [blogPostId], references: [id])
  blogPostId  Int?
  comment     Comment?    @relation("CommentReports", fields: [commentId], references: [id])
  commentId   Int?
  explanation String
  createdAt   DateTime    @default(now())
}

model BlogPostCodeTemplate {
  blogPost       BlogPost     @relation(fields: [blogPostId], references: [id])
  blogPostId     Int
  codeTemplate   CodeTemplate @relation(fields: [codeTemplateId], references: [id])
  codeTemplateId Int

  @@id([blogPostId, codeTemplateId])
}

model CodeTemplateTag {
  codeTemplate   CodeTemplate @relation("CodeTemplateTags", fields: [codeTemplateId], references: [id])
  codeTemplateId Int
  tag            Tag          @relation("CodeTemplateTags", fields: [tagId], references: [id])
  tagId          Int

  @@id([codeTemplateId, tagId])
}

model BlogPostTag {
  blogPost   BlogPost @relation("BlogPostTags", fields: [blogPostId], references: [id])
  blogPostId Int
  tag        Tag      @relation("BlogPostTags", fields: [tagId], references: [id])
  tagId      Int

  @@id([blogPostId, tagId])
}
