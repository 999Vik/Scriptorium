// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Import Prisma's default attributes
datasource db {
  provider = "postgresql" // or your chosen database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enumerations
enum Role {
  USER
  ADMIN
}

enum Language {
  C
  CPP
  JAVA
  PYTHON
  JAVASCRIPT
}

enum ContentType {
  BLOG_POST
  COMMENT
}

// Models
model User {
  id             Int            @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String         @unique
  password       String
  profilePicture String?
  phoneNumber    String?
  role           Role           @default(USER)
  templates      CodeTemplate[]
  blogPosts      BlogPost[]
  comments       Comment[]
  ratings        Rating[]
  reports        Report[]
}

model CodeTemplate {
  id               Int                    @id @default(autoincrement())
  title            String
  explanation      String?
  tags             String[]
  code             String
  language         Language
  isForked         Boolean                @default(false)
  author           User                   @relation(fields: [authorId], references: [id])
  authorId         Int
  parentTemplate   CodeTemplate?          @relation("ForkRelation", fields: [parentTemplateId], references: [id])
  parentTemplateId Int?
  forkedTemplates  CodeTemplate[]         @relation("ForkRelation")
  blogPosts        BlogPostCodeTemplate[]
}

model BlogPost {
  id          Int                    @id @default(autoincrement())
  title       String
  description String?
  tags        String[]
  content     String
  author      User                   @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  comments    Comment[]
  ratings     Rating[]
  reports     Report[]
  templates   BlogPostCodeTemplate[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int
  blogPost        BlogPost  @relation(fields: [blogPostId], references: [id])
  blogPostId      Int
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  replies         Comment[] @relation("CommentReplies")
  createdAt       DateTime  @default(now())
  ratings         Rating[]
  reports         Report[]
}

model Rating {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  Int?
  isUpvote   Boolean
}

model Report {
  id          Int         @id @default(autoincrement())
  reporter    User        @relation(fields: [reporterId], references: [id])
  reporterId  Int
  contentType ContentType
  blogPost    BlogPost?   @relation(fields: [blogPostId], references: [id])
  blogPostId  Int?
  comment     Comment?    @relation(fields: [commentId], references: [id])
  commentId   Int?
  explanation String
  createdAt   DateTime    @default(now())
}

model BlogPostCodeTemplate {
  blogPost       BlogPost     @relation(fields: [blogPostId], references: [id])
  blogPostId     Int
  codeTemplate   CodeTemplate @relation(fields: [codeTemplateId], references: [id])
  codeTemplateId Int
  // Optional: Add createdAt if you want to track when the relation was created
  // createdAt      DateTime     @default(now())

  @@id([blogPostId, codeTemplateId])
}
