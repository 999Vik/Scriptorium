// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String?
  posts    BlogPost[] @relation("UserBlogPosts")
  profile  Profile?
  reports  Report[]   @relation("UserReports")
  comments Comment[]  @relation("UserComments")
}

model BlogPost {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  content     String
  hidden      Boolean   @default(false) // Indicates if the post is hidden due to reports
  tags        Tag[]     @relation("BlogPostTags")
  author      User      @relation("UserBlogPosts", fields: [authorId], references: [id])
  authorId    Int
  reports     Report[]  @relation("BlogPostReports")
  comments    Comment[] @relation("BlogPostComments")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  blogPosts BlogPost[] @relation("BlogPostTags")
}

model Report {
  id          Int       @id @default(autoincrement())
  reason      String
  description String?
  reporter    User      @relation("UserReports", fields: [reporterId], references: [id])
  reporterId  Int
  blogPost    BlogPost? @relation("BlogPostReports", fields: [blogPostId], references: [id])
  blogPostId  Int?
  comment     Comment?  @relation("CommentReports", fields: [commentId], references: [id])
  commentId   Int?
  createdAt   DateTime  @default(now())
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  hidden     Boolean  @default(false) // Indicates if the comment is hidden due to reports
  author     User     @relation("UserComments", fields: [authorId], references: [id])
  authorId   Int
  blogPost   BlogPost @relation("BlogPostComments", fields: [blogPostId], references: [id])
  blogPostId Int
  reports    Report[] @relation("CommentReports")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
